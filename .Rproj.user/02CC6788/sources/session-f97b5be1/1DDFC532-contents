---
title: "MB5370_Module_1_R_Markdown"
author: "Chik Hei Yeung"
date: "2024-02-25"
output: html_document
---




# R Mardown for Module 1 Practical

MB 5370 Module 01: Introduction to programming

This is an R Markdown document for MB5370 module 1 R lab practical.

## R Calculator 
 Variables and Assignment 
 Storing values in memory is a key advantage in programming


```r
 age <- 25
 age
```

```
## [1] 25
```

```r
 first_name <- "Bill"
 age + 1
```

```
## [1] 26
```

```r
 age + age
```

```
## [1] 50
```



## Forbidden word that should be aviod in programming 
 The symbol "=" can have different meaning when programming in R
 
 Examples of incorrect programming 

```
 01_age <- 25    #not possible to start with a number 
 !_age <- 25     #not possible to start with a "!"
 age Bob <- 25   #have space between "age" & "Bob"
 n <- 25         #correct coding to add age "25" to "n"
```

## Exercise questions 1

```r
 cat <- sum(15, 25.1, 20.25)
 bird <- 23.5
 sum(cat, bird)
```

```
## [1] 83.85
```


## Built in functions 


```r
 year_old <- 25.7
 year_old_round <- round(year_old, 0)  #rounding up, avoid using default setting
 floor(year_old)                       #rounding down
```

```
## [1] 25
```

```r
 year_old <- 25.752                    #over-ride the old year_old
 round(year_old, 2)                    #round to 2 digit
```

```
## [1] 25.75
```

```r
 round(year_old, 1)
```

```
## [1] 25.8
```

```r
 round(year_old, 0)
```

```
## [1] 26
```

```r
 #?round                                #description of function
 args(round)                           #argument of a function
```

```
## function (x, digits = 0) 
## NULL
```

## Exercise 2
The presentation of gaps between paste could be customize

```r
 #?paste
 args(paste)
```

```
## function (..., sep = " ", collapse = NULL, recycle0 = FALSE) 
## NULL
```

```r
 name <- "nat"
 age <- 25
 paste(name, "is", age, "year old")
```

```
## [1] "nat is 25 year old"
```

```r
 paste(name, "is", age, "year old", sep = "_") 
```

```
## [1] "nat_is_25_year old"
```

```r
 paste(name, "is", age, "year old", sep = "?")
```

```
## [1] "nat?is?25?year old"
```

```r
 paste0(name, "is", age, "year old")
```

```
## [1] "natis25year old"
```

## Debugging


```r
#debugging
 grade <- 90
 total <- grade + 10
 total  #try to run entire script all the time
```

```
## [1] 100
```

```r
 #prediction
 p <- 2
 z <- 5
 out <- p*z
 out
```

```
## [1] 10
```

```r
 #testing
 x <- 1
 is.character(x)   #to test error within script, e.g is the data grater than...
```

```
## [1] FALSE
```

```r
 #?is.character
```

## Example of error coding 
 The "a" in the coding was not defined 
 
 ```
 out <- p*a
 ```
 
## Exercise 3 for debugging code
Debugging the following code

```
 my_quiz <- c("uno",
              "dos",
              "tres",
              "cuatro"   #missing a "," after the expression
              "cinco")
 print (my_quis)  #typo in "quis"
 str(my_quiz)
 len(my_quiz)     #function "len" not found, "len" is coding for python
```

## Debugged version of the exerise example


```r
 my_quiz <- c("uno",
              "dos",
              "tres",
              "cuatro",   
              "cinco")
 print (my_quiz)
```

```
## [1] "uno"    "dos"    "tres"   "cuatro" "cinco"
```

```r
 str(my_quiz)     #structure of variables 
```

```
##  chr [1:5] "uno" "dos" "tres" "cuatro" "cinco"
```

```r
 length(my_quiz)
```

```
## [1] 5
```

## Data types


```r
 "character"
```

```
## [1] "character"
```

```r
 25
```

```
## [1] 25
```

```r
 25.7
```

```
## [1] 25.7
```

```r
 FALSE
```

```
## [1] FALSE
```

```r
 str(name)  #to know the data type
```

```
##  chr "nat"
```

```r
 typeof(age)
```

```
## [1] "double"
```

```r
 #Data structures
 y <- c(1, 2, 3)
 my_quiz
```

```
## [1] "uno"    "dos"    "tres"   "cuatro" "cinco"
```

```r
 x <- list(1, "a", TRUE)
 x[[2]]   #garbing the second index out from the data
```

```
## [1] "a"
```

# Packages in libraries
Installing packages could be done by the following code

Try to always program the install of data and package in the programming for better record and info sharing
 
```
 install.packages("ggplot2")           #download and install
 library(ggplot2)                      #load into current workplace
```

# For Loop 
The following code is used to activate function for for loop

```
 for (value in that) {                #instructing position
   this                               #e.g collecting data
 }
```

## Example of for loop programming
 "c" for combining parameters
 
 "value" could be any other word you want 
 
 Need keep constant when print
 
 Print("one loop") would not work cause not printing the value but only the repeated loop

```r
 # make a list of elements
 elments_list <-  c("My", "first", "for", "loop") 
 
 # loop over list
 for (value in elments_list) { 
   print(value)  #1st value="My", 2nd value="first"...
   Sys.sleep(0.5)  #to slow the computer down
 } 
```

```
## [1] "My"
## [1] "first"
## [1] "for"
## [1] "loop"
```
## Example of for loop programming with describting sentance added


```r
#make a list
 my_list <- 1:5
 add_me <- 500  # km error in my gps tags
 
 #loop over list
 for(i in my_list){
   result <- i + add_me  # add error constant to i
   print (paste("Result of iteration", i, "=", result, "."))
   Sys.sleep(0.5)
   print("Indivual loop complete1")      # defines end of the loop
 }  
```

```
## [1] "Result of iteration 1 = 501 ."
## [1] "Indivual loop complete1"
## [1] "Result of iteration 2 = 502 ."
## [1] "Indivual loop complete1"
## [1] "Result of iteration 3 = 503 ."
## [1] "Indivual loop complete1"
## [1] "Result of iteration 4 = 504 ."
## [1] "Indivual loop complete1"
## [1] "Result of iteration 5 = 505 ."
## [1] "Indivual loop complete1"
```

```r
 print("Woohoo you're  awesome!!!")  
```

```
## [1] "Woohoo you're  awesome!!!"
```


# Exercise on loop
 Example with for loop in favorite animal list 

```r
 #make a list
 number_favorite_list <- 1:10
 animal_list <- c("tiger", "orca", "lepord", "cat", "dog", "bird", "snake", "lion", "fish", "hourse")
 
 #loop over list
 for (i in number_favorite_list){   #avoid grabbing i from non-numeric list e.g name list
   result <- animal_list [i]
   out <- paste("My number", i, "favorite animal is", result)
   #out <- paste("My number", i, "favorite animal is", animal_list[i]) #it could also work in the background
   print(out)
 }
```

```
## [1] "My number 1 favorite animal is tiger"
## [1] "My number 2 favorite animal is orca"
## [1] "My number 3 favorite animal is lepord"
## [1] "My number 4 favorite animal is cat"
## [1] "My number 5 favorite animal is dog"
## [1] "My number 6 favorite animal is bird"
## [1] "My number 7 favorite animal is snake"
## [1] "My number 8 favorite animal is lion"
## [1] "My number 9 favorite animal is fish"
## [1] "My number 10 favorite animal is hourse"
```

## Incorrect coding example
Should avoid grabbing [i] from non-numeric list such as animal_list in this incorrect example

```
for (i in animal_list){   
   result <- number_favorite_list [i]
   out <- paste("My number", i, "favorite animal is", animal_list[i]) #it could also work in the background
   print(out)
 }
 ```


# Calling function
For calling out certain element in the list

```r
animal_list[3]  
```

```
## [1] "lepord"
```

# If else statement (second control structure)
To instruct the computer to define situation such as "if yes do something, if no do something else"

```
if(this) {
   that
 }
```
For example if x=1, change y into 2

When us "==" such as "X==1" is asking if x equals to 1 (true/false)

It lets the computer be able to make  make decisions in conditions


```r
x <- 1
 if (x==1){       
   y<-2           
 }
```

## Example of programming a  error reflecting result
```
X <- 1
 if(is.number(x)){
   print( "Data type correct: proveed.")
 } else {
   print("ERROR")
 }
```

# Define Functions
To be able to function the non changing bit of the command

Take transition of Fahrenheit to Celsius temperature as an example 
```
temp_C <- (temp_F - 32) * 5/9
 (100 - 32) * 5/9
 (200 - 32) * 5/9
```

Then apply the equation of Fahrenheit to Celsius into a function command

```r
fahrenheit_to_celsius <- function (temp_F) {      #to costume function
   temp_C <- (temp_F - 32) * 5/9
   return(temp_C)      #to give us back the result
 }     
 
 fahrenheit_to_celsius(100)
```

```
## [1] 37.77778
```

Now try to apply the equation of Celsius to Fahrenheit into a function command

```r
celsius_to_fahrenheit <- function (temp_C) {
   temp_F <- (temp_C*9/5 + 32 )
   return(temp_F)
 }
 
 celsius_to_fahrenheit(37.77778)
```

```
## [1] 100
```

# Self-learning exersice
Now try to add function command into for loop

```r
 temp_F_list <- 100:110

 for (i in temp_F_list){   
   out <- fahrenheit_to_celsius(i)
   out <- paste("fahrenheit degree", i, "is ", fahrenheit_to_celsius(i), "in celsius")  #forming statements 
   print(out)
 }
```

```
## [1] "fahrenheit degree 100 is  37.7777777777778 in celsius"
## [1] "fahrenheit degree 101 is  38.3333333333333 in celsius"
## [1] "fahrenheit degree 102 is  38.8888888888889 in celsius"
## [1] "fahrenheit degree 103 is  39.4444444444444 in celsius"
## [1] "fahrenheit degree 104 is  40 in celsius"
## [1] "fahrenheit degree 105 is  40.5555555555556 in celsius"
## [1] "fahrenheit degree 106 is  41.1111111111111 in celsius"
## [1] "fahrenheit degree 107 is  41.6666666666667 in celsius"
## [1] "fahrenheit degree 108 is  42.2222222222222 in celsius"
## [1] "fahrenheit degree 109 is  42.7777777777778 in celsius"
## [1] "fahrenheit degree 110 is  43.3333333333333 in celsius"
```

## Error examples in coding
 Incorrect output due to using 'temp_F_list' instead of 'i', create repeated loops

```r
 temp_F_list <- 100:110

 for (i in temp_F_list){   
   out <- fahrenheit_to_celsius(i)
   out <- paste("fahrenheit degree", temp_F_list, "is ", fahrenheit_to_celsius(i), "in celsius")
   print(out)
 }
```

```
##  [1] "fahrenheit degree 100 is  37.7777777777778 in celsius"
##  [2] "fahrenheit degree 101 is  37.7777777777778 in celsius"
##  [3] "fahrenheit degree 102 is  37.7777777777778 in celsius"
##  [4] "fahrenheit degree 103 is  37.7777777777778 in celsius"
##  [5] "fahrenheit degree 104 is  37.7777777777778 in celsius"
##  [6] "fahrenheit degree 105 is  37.7777777777778 in celsius"
##  [7] "fahrenheit degree 106 is  37.7777777777778 in celsius"
##  [8] "fahrenheit degree 107 is  37.7777777777778 in celsius"
##  [9] "fahrenheit degree 108 is  37.7777777777778 in celsius"
## [10] "fahrenheit degree 109 is  37.7777777777778 in celsius"
## [11] "fahrenheit degree 110 is  37.7777777777778 in celsius"
##  [1] "fahrenheit degree 100 is  38.3333333333333 in celsius"
##  [2] "fahrenheit degree 101 is  38.3333333333333 in celsius"
##  [3] "fahrenheit degree 102 is  38.3333333333333 in celsius"
##  [4] "fahrenheit degree 103 is  38.3333333333333 in celsius"
##  [5] "fahrenheit degree 104 is  38.3333333333333 in celsius"
##  [6] "fahrenheit degree 105 is  38.3333333333333 in celsius"
##  [7] "fahrenheit degree 106 is  38.3333333333333 in celsius"
##  [8] "fahrenheit degree 107 is  38.3333333333333 in celsius"
##  [9] "fahrenheit degree 108 is  38.3333333333333 in celsius"
## [10] "fahrenheit degree 109 is  38.3333333333333 in celsius"
## [11] "fahrenheit degree 110 is  38.3333333333333 in celsius"
##  [1] "fahrenheit degree 100 is  38.8888888888889 in celsius"
##  [2] "fahrenheit degree 101 is  38.8888888888889 in celsius"
##  [3] "fahrenheit degree 102 is  38.8888888888889 in celsius"
##  [4] "fahrenheit degree 103 is  38.8888888888889 in celsius"
##  [5] "fahrenheit degree 104 is  38.8888888888889 in celsius"
##  [6] "fahrenheit degree 105 is  38.8888888888889 in celsius"
##  [7] "fahrenheit degree 106 is  38.8888888888889 in celsius"
##  [8] "fahrenheit degree 107 is  38.8888888888889 in celsius"
##  [9] "fahrenheit degree 108 is  38.8888888888889 in celsius"
## [10] "fahrenheit degree 109 is  38.8888888888889 in celsius"
## [11] "fahrenheit degree 110 is  38.8888888888889 in celsius"
##  [1] "fahrenheit degree 100 is  39.4444444444444 in celsius"
##  [2] "fahrenheit degree 101 is  39.4444444444444 in celsius"
##  [3] "fahrenheit degree 102 is  39.4444444444444 in celsius"
##  [4] "fahrenheit degree 103 is  39.4444444444444 in celsius"
##  [5] "fahrenheit degree 104 is  39.4444444444444 in celsius"
##  [6] "fahrenheit degree 105 is  39.4444444444444 in celsius"
##  [7] "fahrenheit degree 106 is  39.4444444444444 in celsius"
##  [8] "fahrenheit degree 107 is  39.4444444444444 in celsius"
##  [9] "fahrenheit degree 108 is  39.4444444444444 in celsius"
## [10] "fahrenheit degree 109 is  39.4444444444444 in celsius"
## [11] "fahrenheit degree 110 is  39.4444444444444 in celsius"
##  [1] "fahrenheit degree 100 is  40 in celsius"
##  [2] "fahrenheit degree 101 is  40 in celsius"
##  [3] "fahrenheit degree 102 is  40 in celsius"
##  [4] "fahrenheit degree 103 is  40 in celsius"
##  [5] "fahrenheit degree 104 is  40 in celsius"
##  [6] "fahrenheit degree 105 is  40 in celsius"
##  [7] "fahrenheit degree 106 is  40 in celsius"
##  [8] "fahrenheit degree 107 is  40 in celsius"
##  [9] "fahrenheit degree 108 is  40 in celsius"
## [10] "fahrenheit degree 109 is  40 in celsius"
## [11] "fahrenheit degree 110 is  40 in celsius"
##  [1] "fahrenheit degree 100 is  40.5555555555556 in celsius"
##  [2] "fahrenheit degree 101 is  40.5555555555556 in celsius"
##  [3] "fahrenheit degree 102 is  40.5555555555556 in celsius"
##  [4] "fahrenheit degree 103 is  40.5555555555556 in celsius"
##  [5] "fahrenheit degree 104 is  40.5555555555556 in celsius"
##  [6] "fahrenheit degree 105 is  40.5555555555556 in celsius"
##  [7] "fahrenheit degree 106 is  40.5555555555556 in celsius"
##  [8] "fahrenheit degree 107 is  40.5555555555556 in celsius"
##  [9] "fahrenheit degree 108 is  40.5555555555556 in celsius"
## [10] "fahrenheit degree 109 is  40.5555555555556 in celsius"
## [11] "fahrenheit degree 110 is  40.5555555555556 in celsius"
##  [1] "fahrenheit degree 100 is  41.1111111111111 in celsius"
##  [2] "fahrenheit degree 101 is  41.1111111111111 in celsius"
##  [3] "fahrenheit degree 102 is  41.1111111111111 in celsius"
##  [4] "fahrenheit degree 103 is  41.1111111111111 in celsius"
##  [5] "fahrenheit degree 104 is  41.1111111111111 in celsius"
##  [6] "fahrenheit degree 105 is  41.1111111111111 in celsius"
##  [7] "fahrenheit degree 106 is  41.1111111111111 in celsius"
##  [8] "fahrenheit degree 107 is  41.1111111111111 in celsius"
##  [9] "fahrenheit degree 108 is  41.1111111111111 in celsius"
## [10] "fahrenheit degree 109 is  41.1111111111111 in celsius"
## [11] "fahrenheit degree 110 is  41.1111111111111 in celsius"
##  [1] "fahrenheit degree 100 is  41.6666666666667 in celsius"
##  [2] "fahrenheit degree 101 is  41.6666666666667 in celsius"
##  [3] "fahrenheit degree 102 is  41.6666666666667 in celsius"
##  [4] "fahrenheit degree 103 is  41.6666666666667 in celsius"
##  [5] "fahrenheit degree 104 is  41.6666666666667 in celsius"
##  [6] "fahrenheit degree 105 is  41.6666666666667 in celsius"
##  [7] "fahrenheit degree 106 is  41.6666666666667 in celsius"
##  [8] "fahrenheit degree 107 is  41.6666666666667 in celsius"
##  [9] "fahrenheit degree 108 is  41.6666666666667 in celsius"
## [10] "fahrenheit degree 109 is  41.6666666666667 in celsius"
## [11] "fahrenheit degree 110 is  41.6666666666667 in celsius"
##  [1] "fahrenheit degree 100 is  42.2222222222222 in celsius"
##  [2] "fahrenheit degree 101 is  42.2222222222222 in celsius"
##  [3] "fahrenheit degree 102 is  42.2222222222222 in celsius"
##  [4] "fahrenheit degree 103 is  42.2222222222222 in celsius"
##  [5] "fahrenheit degree 104 is  42.2222222222222 in celsius"
##  [6] "fahrenheit degree 105 is  42.2222222222222 in celsius"
##  [7] "fahrenheit degree 106 is  42.2222222222222 in celsius"
##  [8] "fahrenheit degree 107 is  42.2222222222222 in celsius"
##  [9] "fahrenheit degree 108 is  42.2222222222222 in celsius"
## [10] "fahrenheit degree 109 is  42.2222222222222 in celsius"
## [11] "fahrenheit degree 110 is  42.2222222222222 in celsius"
##  [1] "fahrenheit degree 100 is  42.7777777777778 in celsius"
##  [2] "fahrenheit degree 101 is  42.7777777777778 in celsius"
##  [3] "fahrenheit degree 102 is  42.7777777777778 in celsius"
##  [4] "fahrenheit degree 103 is  42.7777777777778 in celsius"
##  [5] "fahrenheit degree 104 is  42.7777777777778 in celsius"
##  [6] "fahrenheit degree 105 is  42.7777777777778 in celsius"
##  [7] "fahrenheit degree 106 is  42.7777777777778 in celsius"
##  [8] "fahrenheit degree 107 is  42.7777777777778 in celsius"
##  [9] "fahrenheit degree 108 is  42.7777777777778 in celsius"
## [10] "fahrenheit degree 109 is  42.7777777777778 in celsius"
## [11] "fahrenheit degree 110 is  42.7777777777778 in celsius"
##  [1] "fahrenheit degree 100 is  43.3333333333333 in celsius"
##  [2] "fahrenheit degree 101 is  43.3333333333333 in celsius"
##  [3] "fahrenheit degree 102 is  43.3333333333333 in celsius"
##  [4] "fahrenheit degree 103 is  43.3333333333333 in celsius"
##  [5] "fahrenheit degree 104 is  43.3333333333333 in celsius"
##  [6] "fahrenheit degree 105 is  43.3333333333333 in celsius"
##  [7] "fahrenheit degree 106 is  43.3333333333333 in celsius"
##  [8] "fahrenheit degree 107 is  43.3333333333333 in celsius"
##  [9] "fahrenheit degree 108 is  43.3333333333333 in celsius"
## [10] "fahrenheit degree 109 is  43.3333333333333 in celsius"
## [11] "fahrenheit degree 110 is  43.3333333333333 in celsius"
```

## Data frames
 Always input data frames into programming for better keeping of record and sharing information

```r
my_dataframe <- data.frame (no = c(1,2,3), 
                             name = c("Tracey", "John", "Pete"),
                             present = c(TRUE, FALSE, TRUE))
 my_dataframe
```

```
##   no   name present
## 1  1 Tracey    TRUE
## 2  2   John   FALSE
## 3  3   Pete    TRUE
```

```r
 str (my_dataframe)    #show data type and structure
```

```
## 'data.frame':	3 obs. of  3 variables:
##  $ no     : num  1 2 3
##  $ name   : chr  "Tracey" "John" "Pete"
##  $ present: logi  TRUE FALSE TRUE
```

```r
 my_dataframe$no = as.factor(my_dataframe$no)  #force to change data type
 #?as.factor
 my_dataframe$no
```

```
## [1] 1 2 3
## Levels: 1 2 3
```

## Importing large data set
When importing large data set file into programming, use "read.csv" function to import large data set
```
read.csv  
```

## Creating R Markdown and knitting code
Install "knitr" package to knit R Markdown scripts 
```
 install.packages("knitr")
```



